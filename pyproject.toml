[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neex-legal-review"
version = "1.0.0"
description = "AI-powered legal contract review system based on NEEX blueprint"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "NEEX Legal AI Team", email = "legal@neex.com"},
]
keywords = ["legal", "contract", "review", "ai", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "click==8.1.7",
    "rich==13.7.1",
    "pydantic==2.5.3",
    "pyyaml==6.0.1",
    "jinja2==3.1.3",
    "python-docx==0.8.11",
    "PyPDF2==3.0.1",
    "transformers==4.36.2",
    "torch==2.1.2",
    "sentence-transformers==2.2.2",
    "spacy==3.7.2",
    "nltk==3.8.1",
    "pandas==2.1.4",
    "numpy==1.24.4",
    "python-dotenv==1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    "black==23.12.1",
    "mypy==1.8.0",
    "flake8==7.0.0",
    "pre-commit==3.6.0",
]
enhanced = [
    "opencv-python>=4.8.0",
    "Pillow>=10.1.0",
    "python-magic>=0.4.27",
]

[project.scripts]
neex-review = "src.cli.main:cli"

[project.urls]
Homepage = "https://github.com/neex/legal-review"
Repository = "https://github.com/neex/legal-review.git"
Documentation = "https://neex-legal-review.readthedocs.io"
"Bug Tracker" = "https://github.com/neex/legal-review/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
